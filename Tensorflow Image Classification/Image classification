# Prepare dataset
!wget --no-check-certificate \
  https://dicoding-academy-assets.sgp1.cdn.digitaloceanspaces.com/184/messy-vs-clean-room.zip \
  -O /tmp/messy_vs_clean_room.zip
  
# Extract zip file
import zipfile,os
local_zip = '/tmp/messy_vs_clean_room.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()
 
base_dir = '/tmp/images'
train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'val')

# Check train and validation data
os.listdir('/tmp/images/train')
os.listdir('/tmp/images/val')

# Data augmentation using ImageDataGenerator
from tensorflow.keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(
    rescale = 1./255,
    rotation_range=20,
    horizontal_flip = True,
    shear_range = 0.2,
    fill_mode = 'nearest'
)

test_datagen = ImageDataGenerator(
    rescale = 1./255
)

# Prepare training and validation data from the image data set that is loaded in memory via flow() function.
train_generator = train_datagen.flow_from_directory(
    train_dir, #direktori data latih
    target_size = (300, 300), #mengubah resolusi seluruh gambar menjadi 150x150 pixel
    batch_size = 4, 
    #karena ini merupakan masalah klasifikasi 2 kelas, maka menggunakan class_mode = 'binary'
    class_mode = 'binary'
)

validation_generator = test_datagen.flow_from_directory(
    validation_dir, #direktori data validasi
    target_size = (300, 300), #mengubah resousi seluruh gambar menjadi 150x150 pixel
    batch_size = 4,
    class_mode = 'binary'
)

# Create Convolutional Neural Network (CNN) model
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(300, 300, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(512, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Summary
model.summary()

# Compile model using 'adam' optimizer loss function 'binary_crossentropy' 
model.compile(loss='binary_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])
                            
# Train model with fit
model.fit(
    train_generator,
    steps_per_epoch = 25, #How many batches will be executed per epoch
    epochs = 20, #Add epochs if the model accuracy is not optimal
    validation_data = validation_generator, #Displays the accuracy of validation data testing
    validation_steps = 5, #How many batches will be executed per epoch
    verbose = 2
)              

# Image predicting,
# Before you use the code below, make sure you already have a picture of the bedroom
import numpy as np
from google.colab import files
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
%matplotlib inline

uploaded = files.upload()
for fn in uploaded.keys():
  #predicting image
  path = fn
  img = image.load_img(path, target_size = (300, 300))

  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis= 0)
  images = np.vstack([x])

  classes = model.predict(images, batch_size=10)
  print(fn)
  if classes == 0:
    print('Clean')
  else:
    print('Messy')
    
    
## ------------ Note ------------ ##
# If you want better pixel (image resolution),... #
# make sure you increase the value on target_size and input_shape. ... #
# I try (300, 300) and it takes 1 minutes per epoch to run #
